"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTagFromRef = exports.getBranchFromRef = exports.getBranchOrTagFromRef = exports.getVersionHead = exports.getVersions = void 0;
const tslib_1 = require("tslib");
const semver = (0, tslib_1.__importStar)(require("semver"));
const tiny_invariant_1 = (0, tslib_1.__importDefault)(require("tiny-invariant"));
function getBranchOrTagFromRef(ref) {
    let regex = /^refs\/(heads|tags)\//;
    (0, tiny_invariant_1.default)(regex.test(ref), `Expected a ref, received "${ref}"`);
    return ref.replace(regex, "");
}
exports.getBranchOrTagFromRef = getBranchOrTagFromRef;
function getBranchFromRef(ref) {
    let regex = /^refs\/heads\//;
    (0, tiny_invariant_1.default)(regex.test(ref), `Expected a branch ref, received "${ref}"`);
    return ref.replace(regex, "");
}
exports.getBranchFromRef = getBranchFromRef;
function getTagFromRef(ref) {
    let regex = /^refs\/tags\//;
    (0, tiny_invariant_1.default)(regex.test(ref), `Expected a tag ref, received "${ref}"`);
    return ref.replace(regex, "");
}
exports.getTagFromRef = getTagFromRef;
function getVersionHead(ref) {
    let version = getBranchOrTagFromRef(ref);
    let tag = semver.coerce(version);
    if (!tag)
        return version;
    let head = tag.major > 0
        ? `v${tag.major}`
        : tag.minor > 0
            ? `v0.${tag.minor}`
            : `v0.0.${tag.patch}`;
    return head;
}
exports.getVersionHead = getVersionHead;
function getVersions(refs) {
    let tags = refs.map((ref) => ref.replace(/^refs\/tags\//, ""));
    let validTags = tags.filter((ref) => semver.valid(ref));
    let sorted = validTags.sort((a, b) => semver.compare(b, a));
    let versions = sorted.map((version) => {
        let head = getVersionHead(`refs/tags/${version}`);
        return {
            head,
            version,
            isLatest: false,
        };
    });
    (0, tiny_invariant_1.default)(versions.length, "Expected at least one valid tag");
    versions[0].isLatest = true;
    return versions;
}
exports.getVersions = getVersions;
