"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRefFromParam = void 0;
const tslib_1 = require("tslib");
const semver = (0, tslib_1.__importStar)(require("semver"));
const tiny_invariant_1 = (0, tslib_1.__importDefault)(require("tiny-invariant"));
function getRefFromParam(refParam, refs, latestBranchRef) {
    (0, tiny_invariant_1.default)(refs.length, "Expected at least one ref");
    if (refs.includes(refParam)) {
        let validVersion = semver.valid(refParam);
        return validVersion
            ? `refs/tags/v${validVersion}`
            : `refs/heads/${refParam}`;
    }
    let [latestTag] = refs
        .filter((ref) => semver.valid(ref))
        .sort(semver.rcompare);
    (0, tiny_invariant_1.default)(latestTag, "No latest ref found");
    if (semver.satisfies(latestTag, refParam, { includePrerelease: true })) {
        return latestBranchRef;
    }
    let maxSatisfying = semver.maxSatisfying(refs, refParam, {
        includePrerelease: true,
    });
    if (maxSatisfying) {
        return `refs/tags/${maxSatisfying}`;
    }
    return null;
}
exports.getRefFromParam = getRefFromParam;
