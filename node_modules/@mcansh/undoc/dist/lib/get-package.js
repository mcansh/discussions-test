"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackage = void 0;
const tslib_1 = require("tslib");
const url_1 = require("url");
const follow_redirects_1 = require("follow-redirects");
const gunzip_maybe_1 = (0, tslib_1.__importDefault)(require("gunzip-maybe"));
const buffer_from_stream_1 = require("./buffer-from-stream");
let agent = new follow_redirects_1.https.Agent({
    keepAlive: true,
});
function get(options) {
    return new Promise((accept, reject) => {
        follow_redirects_1.https.get(options, accept).on("error", reject);
    });
}
async function getPackage(packageName, version, getOptions = {}) {
    let tarballURL = `https://github.com/${packageName}/archive/${version}.tar.gz`;
    console.debug("Fetching package for %s from %s", packageName, tarballURL);
    let { hostname, pathname } = new url_1.URL(tarballURL);
    let options = {
        agent: agent,
        hostname: hostname,
        path: pathname,
        ...getOptions,
    };
    let res = await get(options);
    if (res.statusCode === 200) {
        let stream = res.pipe((0, gunzip_maybe_1.default)());
        return stream;
    }
    if (res.statusCode === 404) {
        return null;
    }
    let content = (await (0, buffer_from_stream_1.bufferStream)(res)).toString("utf-8");
    console.error("Error fetching tarball for %s@%s (status: %s)", packageName, version, res.statusCode);
    console.error(content);
    return null;
}
exports.getPackage = getPackage;
